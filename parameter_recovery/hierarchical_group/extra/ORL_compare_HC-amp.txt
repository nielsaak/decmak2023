model {

  ###### Priors ################
  alpha_a_rew ~  dnorm(0,1)
  mu_a_rew ~ dnorm(0,1)
  lambda_a_rew_ctr ~ dgamma(.1,.1) 
  lambda_a_rew_amp ~ dgamma(.1,.1) 
  
  alpha_a_pun ~  dnorm(0,1)
  mu_a_pun ~ dnorm(0,1)
  lambda_a_pun_ctr ~ dgamma(.1,.1) 
  lambda_a_pun_amp ~ dgamma(.1,.1) 

  alpha_K ~  dnorm(0,1)
  mu_K ~ dnorm(0,1)
  lambda_K_ctr ~ dgamma(.1,.1) 
  lambda_K_amp ~ dgamma(.1,.1) 
  
  alpha_omega_f ~  dnorm(0,1)
  mu_omega_f ~ dnorm(0,1)
  lambda_omega_f_ctr ~ dgamma(.1,.1) 
  lambda_omega_f_amp ~ dgamma(.1,.1) 
  
  alpha_omega_p ~  dnorm(0,1)
  mu_omega_p ~ dnorm(0,1)
  lambda_omega_p_ctr ~ dgamma(.1,.1) 
  lambda_omega_p_amp ~ dgamma(.1,.1) 

  #----------- Control model -------------------------------------------
  for (s in 1:nsubs_ctr) {

    a_rew_ctr[s] ~ dnorm((mu_a_rew - (alpha_a_rew/2)),lambda_a_rew_ctr)T(0,1)
    a_pun_ctr[s] ~ dnorm((mu_a_pun - (alpha_a_pun/2)),lambda_a_pun_ctr)T(0,1)
    K_ctr[s]  ~ dnorm((mu_K - (alpha_K/2)),lambda_K_ctr)T(0,)
    theta_ctr[s] <- 1# ~ dunif(0,2)
    omega_f_ctr[s] ~ dnorm((mu_omega_f - (alpha_omega_f/2)),lambda_omega_f_ctr)
    omega_p_ctr[s] ~ dnorm((mu_omega_p - (alpha_omega_p/2)),lambda_omega_p_ctr)
  
    #------ set t1 model variables --------------------------
      
    Ev_ctr[s,1,1] <- 0
    Ev_ctr[s,1,2] <- 0
    Ev_ctr[s,1,3] <- 0
    Ev_ctr[s,1,4] <- 0
      
    Ef_ctr[s,1,1] <- 0
    Ef_ctr[s,1,2] <- 0
    Ef_ctr[s,1,3] <- 0
    Ef_ctr[s,1,4] <- 0
      
    PS_ctr[s,1,1] <- 0
    PS_ctr[s,1,2] <- 0
    PS_ctr[s,1,3] <- 0
    PS_ctr[s,1,4] <- 0

    p_ctr[s,1,1] <- 0
    p_ctr[s,1,2] <- 0
    p_ctr[s,1,3] <- 0
    p_ctr[s,1,4] <- 0

    for (t in 2:ntrials_ctr[s]) {
      
      #this is imortant mention this as constructing model
      signX_ctr[s,t] <- ifelse(X_ctr[s,t-1]<0,-1,1)
      
      for (d in 1:4) {
        
        # -------- Updating expected values ------------------------
        Ev_update_ctr[s,t,d] <- ifelse(X_ctr[s,t-1]>=0,
                                  Ev_ctr[s,t-1,d] + a_rew_ctr[s]*((X_ctr[s,t-1]) - Ev_ctr[s,t-1,d]), 
                                  Ev_ctr[s,t-1,d] + a_pun_ctr[s]*((X_ctr[s,t-1]) - Ev_ctr[s,t-1,d])
        )
                              
        Ev_ctr[s,t,d] <- ifelse(d==x_ctr[s,t-1],Ev_update_ctr[s,t,d],Ev_ctr[s,t-1,d])
        
        # -------- Updating expected frequencies ------------------------
        #update expected frequencies for ALL decks - AS IF THERE WERE ALL CHOSEN
        Ef_cho_ctr[s,t,d] <- ifelse(X_ctr[s,t-1]>=0, 
                                Ef_ctr[s,t-1,d] + a_rew_ctr[s]*(signX_ctr[s,t] - Ef_ctr[s,t-1,d]),
                                Ef_ctr[s,t-1,d] + a_pun_ctr[s]*(signX_ctr[s,t] - Ef_ctr[s,t-1,d])
        )
        
        #update expected frequencies for ALL decks - AS IF THEY WERE ALL UNCHOSEN. 
        Ef_not_ctr[s,t,d] <- ifelse(X_ctr[s,t-1]>=0, 
                                Ef_ctr[s,t-1,d] + a_pun_ctr[s]*(-(signX_ctr[s,t]/3) - Ef_ctr[s,t-1,d]),
                                Ef_ctr[s,t-1,d] + a_rew_ctr[s]*(-(signX_ctr[s,t]/3) - Ef_ctr[s,t-1,d])
        ) 
        
        #copy appropriate values to ef variable
        Ef_ctr[s,t,d] <- ifelse(d==x_ctr[s,t-1],Ef_cho_ctr[s,t,d],Ef_not_ctr[s,t,d])  
        #------------------------------------------------------------------
        
        #ifelse needed to disctiminate chosen and unchosen decks
        PS_ctr[s,t,d] <- ifelse(x_ctr[s,t-1]==d,1/(1+K_ctr[s]),PS_ctr[s,t-1,d]/(1+K_ctr[s]))
        
        V_ctr[s,t,d] <- Ev_ctr[s,t,d] + (Ef_ctr[s,t,d]*omega_f_ctr[s]) + (PS_ctr[s,t,d]*omega_p_ctr[s])
        
        exp_p_ctr[s,t,d] <- exp(theta_ctr[s]*V_ctr[s,t,d])
        
      }
      
      for (d in 1:4) {
        p_ctr[s,t,d] <- exp_p_ctr[s,t,d]/sum(exp_p_ctr[s,t,])
      }
        
      x_ctr[s,t] ~ dcat(p_ctr[s,t,])
      
    }
  }

  ###################################################
  #-------- amphetamine model------------------------
  ###################################################
  for (s in 1:nsubs_amp) {

    a_rew_amp[s] ~ dnorm((mu_a_rew + (alpha_a_rew/2)),lambda_a_rew_amp)T(0,1)
    a_pun_amp[s] ~ dnorm((mu_a_pun + (alpha_a_pun/2)),lambda_a_pun_amp)T(0,1)
    K_amp[s]  ~ dnorm((mu_K + (alpha_K/2)),lambda_K_amp)T(0,)
    theta_amp[s] <- 1# ~ dunif(0,2)
    omega_f_amp[s] ~ dnorm((mu_omega_f + (alpha_omega_f/2)),lambda_omega_f_amp)
    omega_p_amp[s] ~ dnorm((mu_omega_p + (alpha_omega_p/2)),lambda_omega_p_amp)
  
    #------ set t1 model variables --------------------------
      
    Ev_amp[s,1,1] <- 0
    Ev_amp[s,1,2] <- 0
    Ev_amp[s,1,3] <- 0
    Ev_amp[s,1,4] <- 0
      
    Ef_amp[s,1,1] <- 0
    Ef_amp[s,1,2] <- 0
    Ef_amp[s,1,3] <- 0
    Ef_amp[s,1,4] <- 0
      
    PS_amp[s,1,1] <- 0
    PS_amp[s,1,2] <- 0
    PS_amp[s,1,3] <- 0
    PS_amp[s,1,4] <- 0

    p_amp[s,1,1] <- 0
    p_amp[s,1,2] <- 0
    p_amp[s,1,3] <- 0
    p_amp[s,1,4] <- 0

    for (t in 2:ntrials_amp[s]) {
      
      #this is imortant mention this as constructing model
      signX_amp[s,t] <- ifelse(X_amp[s,t-1]<0,-1,1)
      
      for (d in 1:4) {
        
        # -------- Updating expected values ------------------------
        Ev_update_amp[s,t,d] <- ifelse(X_amp[s,t-1]>=0,
                                  Ev_amp[s,t-1,d] + a_rew_amp[s]*((X_amp[s,t-1]) - Ev_amp[s,t-1,d]), 
                                  Ev_amp[s,t-1,d] + a_pun_amp[s]*((X_amp[s,t-1]) - Ev_amp[s,t-1,d])
        )
                              
        Ev_amp[s,t,d] <- ifelse(d==x_amp[s,t-1],Ev_update_amp[s,t,d],Ev_amp[s,t-1,d])
        
        # -------- Updating expected frequencies ------------------------
        #update expected frequencies for ALL decks - AS IF THERE WERE ALL CHOSEN
        Ef_cho_amp[s,t,d] <- ifelse(X_amp[s,t-1]>=0, 
                                Ef_amp[s,t-1,d] + a_rew_amp[s]*(signX_amp[s,t] - Ef_amp[s,t-1,d]),
                                Ef_amp[s,t-1,d] + a_pun_amp[s]*(signX_amp[s,t] - Ef_amp[s,t-1,d])
        )
        
        #update expected frequencies for ALL decks - AS IF THEY WERE ALL UNCHOSEN. 
        Ef_not_amp[s,t,d] <- ifelse(X_amp[s,t-1]>=0, 
                                Ef_amp[s,t-1,d] + a_pun_amp[s]*(-(signX_amp[s,t]/3) - Ef_amp[s,t-1,d]),
                                Ef_amp[s,t-1,d] + a_rew_amp[s]*(-(signX_amp[s,t]/3) - Ef_amp[s,t-1,d])
        ) 
        
        #copy appropriate values to ef variable
        Ef_amp[s,t,d] <- ifelse(d==x_amp[s,t-1],Ef_cho_amp[s,t,d],Ef_not_amp[s,t,d])  
        #------------------------------------------------------------------
        
        #ifelse needed to disctiminate chosen and unchosen decks
        PS_amp[s,t,d] <- ifelse(x_amp[s,t-1]==d,1/(1+K_amp[s]),PS_amp[s,t-1,d]/(1+K_amp[s]))
        
        V_amp[s,t,d] <- Ev_amp[s,t,d] + Ef_amp[s,t,d]*omega_f_amp[s] + PS_amp[s,t,d]*omega_p_amp[s]
        
        exp_p_amp[s,t,d] <- exp(theta_amp[s]*V_amp[s,t,d])
        
      }
      
      for (d in 1:4) {
        p_amp[s,t,d] <- exp_p_amp[s,t,d]/sum(exp_p_amp[s,t,])
      }
        
      x_amp[s,t] ~ dcat(p_amp[s,t,])
      
    }
  }


}